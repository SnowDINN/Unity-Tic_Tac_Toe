// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QComponentPlayer))]
  public unsafe partial class QComponentPlayerPrototype : ComponentPrototype<Quantum.QComponentPlayer> {
    public PlayerRef Player;
    partial void MaterializeUser(Frame frame, ref Quantum.QComponentPlayer result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.QComponentPlayer component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.QComponentPlayer result, in PrototypeMaterializationContext context = default) {
        result.Player = this.Player;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QComponentStone))]
  public unsafe partial class QComponentStonePrototype : ComponentPrototype<Quantum.QComponentStone> {
    public Int32 X;
    public Int32 Y;
    public Int32 OwnerId;
    public Int32 DestroyTurn;
    partial void MaterializeUser(Frame frame, ref Quantum.QComponentStone result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.QComponentStone component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.QComponentStone result, in PrototypeMaterializationContext context = default) {
        result.X = this.X;
        result.Y = this.Y;
        result.OwnerId = this.OwnerId;
        result.DestroyTurn = this.DestroyTurn;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QComponentSystem))]
  public unsafe partial class QComponentSystemPrototype : ComponentPrototype<Quantum.QComponentSystem> {
    [DynamicCollectionAttribute()]
    public PlayerRef[] Players = {};
    [DynamicCollectionAttribute()]
    public Int32[] RetryPlayers = {};
    public Int32 CurrentPlayerTurn;
    public Int32 CurrentTurn;
    partial void MaterializeUser(Frame frame, ref Quantum.QComponentSystem result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.QComponentSystem component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.QComponentSystem result, in PrototypeMaterializationContext context = default) {
        if (this.Players.Length == 0) {
          result.Players = default;
        } else {
          var list = frame.AllocateList(out result.Players, this.Players.Length);
          for (int i = 0; i < this.Players.Length; ++i) {
            PlayerRef tmp = default;
            tmp = this.Players[i];
            list.Add(tmp);
          }
        }
        if (this.RetryPlayers.Length == 0) {
          result.RetryPlayers = default;
        } else {
          var list = frame.AllocateList(out result.RetryPlayers, this.RetryPlayers.Length);
          for (int i = 0; i < this.RetryPlayers.Length; ++i) {
            Int32 tmp = default;
            tmp = this.RetryPlayers[i];
            list.Add(tmp);
          }
        }
        result.CurrentPlayerTurn = this.CurrentPlayerTurn;
        result.CurrentTurn = this.CurrentTurn;
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
